#!/usr/bin/perl
## ----------------------------------------------------------------------------

use strict;
use warnings;
use Fatal qw(mkdir symlink);
use Data::Dump qw(pp);
use Cwd;
use Config::Simple;
use Getopt::Mixed "nextOption";
use File::Touch;
use File::Copy;
use File::Path;
use File::Slurp;
use File::Basename;
use Digest::MD5 qw(md5_hex);

# use AwsSum::Amazon::S3;
# use AwsSum::Amazon::SimpleDB;

my $VERBOSE = 0;
my $DEBUG = 0;

my $dirs = [ '.fstore', '.fstore/metadata', '.fstore/hash' ];

my $option_type = {
    tags => q{array},
};

## ----------------------------------------------------------------------------

{
    # get the options first, then the config file
    my $opt = get_opt();
    my $cfg = get_cfg( $opt );

    # get the command
    my $command = shift @ARGV;
    unless ( defined $command ) {
        usage( q{Specify a command.} );
        exit 2;
    }

    # ok, let's see what command we have been given
    if ( $command eq q{init} ) {
        cmd_init( $cfg, $opt);
    }
    elsif ( $command eq q{add} ) {
        my (@filenames) = @ARGV;
        cmd_add( $cfg, $opt, \@filenames );
    }
    else {
        usage();
    }

}

## ----------------------------------------------------------------------------

sub cmd_init {
    my ($cfg, $opt) = @_;

    # shouldn't have any options and cfg shouldn't matter here
    touch( '.fstore/config' );
    
    foreach my $dir ( @$dirs ) {
        next if -d $dir;
        mkdir $dir;
    }
}

sub cmd_add {
    my ($cfg, $opt, $filenames) = @_;

    # make sure we have at least one tag and one file
    unless ( @{$opt->{tags}} ) {
        usage( q{Provide at least one category:label.} );
        exit 2;
    }
    unless ( @$filenames ) {
        usage( q{Provide at least one file.} );
        exit 2;
    }

    my $cwd = getcwd();

    # loop through all the files
    for my $filename ( @$filenames ) {
        # get the basename to the file
        my $basename = basename( $filename );

        unless ( -f $filename ) {
            print STDERR qq{Warning: Filename '$filename' doesn't exist\n};
            next;
        }
        my $contents = read_file( $filename );
        my $md5 = md5_hex( $contents );

        # if the hashed file already exists, don't do anything
        unless ( -f qq{.fstore/hash/$md5} ) {
            # copy the file into the store
            copy( $filename, qq{.fstore/hash/$md5} );
        }

        # get the current metadata (if any)
        my $metadata = get_metadata( $md5 );

        # set some defaults
        $metadata->{filename} ||= $basename;
        $metadata->{tags} ||= [];

        # do a quick check on filename
        unless ( $basename eq $metadata->{filename} ) {
            print STDERR "Warning: New file '$basename' already has the name '$metadata->{filename}";
            $metadata->{filename} = $basename;
        }

        # symlink to all the tags
        foreach my $tag ( @{$opt->{tags}} ) {
            my ($category, $label) = split( ':', $tag, 2 );
            unless ( -d qq{$category/$label} ) {
                mkpath( qq{$category/$label} );
            }

            # symlink the file from the label directory
            if ( -l qq{$category/$label/$basename} ) {
                print STDERR qq{Warning: File exists - '$category/$label/$basename'\n};
            }
            else {
                symlink( qq{$cwd/.fstore/hash/$md5}, qq{$category/$label/$basename} );
            }

            # add this category:label to the tags
            unless ( ref $metadata->{tags} eq 'ARRAY' ) {
                $metadata->{tags} = [ $metadata->{tags} ];
            }
            if ( grep { $_ eq $tag } @{$metadata->{tags}} ) {
                # this tag already exists in the metadata tags
            }
            else {
                push @{$metadata->{tags}}, $tag;
            }
        }

        # write all the new metadata now
        write_metadata( $md5, $metadata );

    }
}

## ----------------------------------------------------------------------------

sub get_metadata {
    my ($md5) = @_;

    my $filename = qq{.fstore/metadata/$md5};
    return {} unless -f $filename;

    my $data = {};

    my @lines = read_file( $filename );
    chomp @lines;

    foreach my $line ( @lines ) {
        my ($field, $value) = split(/\s+/, $line, 2);
        if ( $field eq 'filename' ) {
            $data->{$field} = $value;
        }
        elsif ( $field eq 'tags' ) {
            if ( defined $value ) {
                @{$data->{$field}} = split(/\s+/, $value);
            }
            else {
                $data->{$field} = [];
            }
        }
        else {
            print STDERR qq{Warning: Unknown field in metadata: '$field'};
        }
    }

    return $data;
}

sub write_metadata {
    my ($md5, $data) = @_;

    # write the metadata file
    write_file(
        qq{.fstore/metadata/$md5},
        qq{filename   $data->{filename}\n},
        qq{tags   @{$data->{tags}}\n},
    );
}

sub get_opt {
    my $opt = {};

    # all the long and short option names
    my @options = qw(
        tags=s        t>tags
        verbose
        debug
    );
    Getopt::Mixed::init( join(q{ }, @options) );

    # loop through all options
    while ( my ($name, $value) = nextOption() ) {
        if ( exists $option_type->{$name} && $option_type->{$name} eq q{array} ) {
            push @{$opt->{$name}}, $value;
        }
        else {
            $opt->{$name} = $value;
        }
    }
    Getopt::Mixed::cleanup();

    # make sure all the 'array's are actually arrays
    foreach my $option_name ( grep { $option_type->{$_} eq q{array} && $_ } keys %$option_type ) { 
        if ( defined $opt->{$option_name} ) {
            next if ref $opt->{$option_name} eq 'ARRAY';
            $opt->{$option_name} = [ $opt->{$option_name} ];
        }
        else {
            $opt->{$option_name} = [];
        }
    }

    # process the boolean options
    foreach my $name ( qw(verbose debug) ) {
        $opt->{$name} = exists $opt->{$name} ? 1 : 0;
    }

    # set these globals
    $DEBUG = $opt->{debug};
    $VERBOSE = $opt->{verbose};

    return $opt;
}

sub get_cfg {
    my ($option) = @_;

    my $cfg = {};

    # so, read either the normal config or that defined on the command line
    my $filename = q{.fstore/config};
    if ( -f $filename ) {
        Config::Simple->import_from( $filename, $cfg );
    }

    return $cfg;
}

sub usage {
    my ($msg) = @_;

    if ( defined $msg ) {
        print "Error: $msg\n\n";
    }

    print STDERR <<"EOF";
Usage: $0 <command> [opts...] <file...>

Commands:

  * init
  * add             -t <tags>... file...
  * move            (ToDo)
  * rename          (ToDo)
  * label           (ToDo)
  * peel            (ToDo)
  * remove          (ToDo)
  * reindex         (ToDo)
  * fsck            (ToDo)
  * sync            (ToDo) <remote>

Options:

  -t, --tags        tags, where <tag> := <category>:<label>

Links:

  * project         http://appsattic.com/project/fstore
  * repository      https://github.com/appsattic/fstore

Report bugs to <chilts\@appsattic.com>.
EOF
}

## ----------------------------------------------------------------------------
